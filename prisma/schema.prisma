// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FACULTY
  STUDENT
  ADMIN
}

enum SimulationMode {
  learning
  assessment
}

enum SimulationStatus {
  active
  ended
}

enum Speaker {
  student
  persona
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  role           Role
  profileJson    Json?
  createdAt      DateTime @default(now())

  // relations
  createdCases   Case[]         @relation("CaseCreator")
  studentSims    Simulation[]   @relation("StudentSimulations")
  facultyNotes   Feedback[]     @relation("FacultyFeedback")
  studentNotes   Feedback[]     @relation("StudentFeedback")
}

model Competency {
  id    String @id @default(cuid())
  name  String @unique
  desc  String
  cases Case[]

  @@index([name])
}

model Case {
  id                     String   @id @default(cuid())
  title                  String
  description            String
  culturalContextJson    Json
  objectivesJson         Json
  learningObjectivesJson Json
  competencyId           String
  rubricId               String
  createdBy              String
  updatedAt              DateTime @updatedAt

  competencyId        String
  competency          Competency @relation(fields: [competencyId], references: [id])
  learningObjectivesJson Json

  // relations
  competency  Competency   @relation(fields: [competencyId], references: [id])
  rubric      Rubric       @relation(fields: [rubricId], references: [id])
  creator     User         @relation("CaseCreator", fields: [createdBy], references: [id])
  personas    Persona[]
  simulations Simulation[]

  @@index([competencyId])
  @@index([rubricId])
  @@index([createdBy])
  @@index([competencyId])
}

model Persona {
  id             String   @id @default(cuid())
  caseId         String
  name           String
  backgroundJson Json
  voiceId        String
  avatarId       String
  promptTemplate String
  safetyJson     Json
  createdAt      DateTime @default(now())

  case        Case         @relation(fields: [caseId], references: [id])
  simulations Simulation[]

  @@index([caseId])
}

model Simulation {
  id         String            @id @default(cuid())
  caseId     String
  personaId  String
  studentId  String
  mode       SimulationMode
  status     SimulationStatus
  startedAt  DateTime          @default(now())
  endedAt    DateTime?

  // relations
  case       Case              @relation(fields: [caseId], references: [id])
  persona    Persona           @relation(fields: [personaId], references: [id])
  student    User              @relation("StudentSimulations", fields: [studentId], references: [id])
  turns      Turn[]
  analytics  AnalyticsSummary?
  feedback   Feedback[]

  @@index([caseId])
  @@index([personaId])
  @@index([studentId])
}

model Turn {
  id            String   @id @default(cuid())
  simulationId  String
  speaker       Speaker
  text          String
  audioUrl      String?
  metaJson      Json?
  createdAt     DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])

  @@index([simulationId])
}

model Rubric {
  id            String   @id @default(cuid())
  name          String
  epasYear      Int
  structureJson Json

  cases Case[]
}

model AnalyticsSummary {
  id                   String   @id @default(cuid())
  simulationId         String   @unique
  metricsJson          Json
  competencyScoresJson Json
  createdAt            DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])
}

model Feedback {
  id             String   @id @default(cuid())
  simulationId   String
  studentId      String
  facultyId      String?
  aiFeedbackMd   String
  facultyNotesMd String?
  actionItemsJson Json?
  createdAt      DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])
  student    User       @relation("StudentFeedback", fields: [studentId], references: [id])
  faculty    User?      @relation("FacultyFeedback", fields: [facultyId], references: [id])

  @@index([simulationId])
  @@index([studentId])
  @@index([facultyId])
}