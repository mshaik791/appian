// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  FACULTY
  STUDENT
  ADMIN
}

enum SimulationMode {
  learning
  assessment
}

enum SimulationStatus {
  active
  ended
}

enum Speaker {
  student
  persona
}

// Media kind for assets linked to a case
enum MediaKind {
  video
  audio
  image
}

model User {
  id             String   @id @default(cuid())
  email          String   @unique
  hashedPassword String
  role           Role
  profileJson    Json?
  createdAt      DateTime @default(now())

  // relations
  createdCases   Case[]         @relation("CaseCreator")
  studentSims    Simulation[]   @relation("StudentSimulations")
  facultyNotes   Feedback[]     @relation("FacultyFeedback")
  studentNotes   Feedback[]     @relation("StudentFeedback")
  assignedCases  Assignment[]   @relation("StudentAssignments")
  assignedByMe   Assignment[]   @relation("AdminAssignments")
  evaluations    SimulationEvaluation[]
  reflections    ReflectionResponse[]
}

model Competency {
  id    String @id @default(cuid())
  name  String @unique
  desc  String
  cases Case[]

  @@index([name])
}

model Case {
  id                     String   @id @default(cuid())
  title                  String
  description            String
  culturalContextJson    Json
  objectivesJson         Json
  learningObjectivesJson Json
  competencyId           String
  rubricId               String
  createdBy              String
  updatedAt              DateTime @updatedAt

  // Optional fields to support track-specific UX
  trackId                String?  // links to Track.id
  personaName            String?
  shortBio               String?
  demographicsJson       Json?
  coverImageUrl          String?
  competencyCode         String?
  learningObjective      String?

  // relations
  competency  Competency   @relation(fields: [competencyId], references: [id])
  rubric      Rubric       @relation(fields: [rubricId], references: [id])
  creator     User         @relation("CaseCreator", fields: [createdBy], references: [id])
  personas    Persona[]
  simulations Simulation[]
  assignments Assignment[]
  evaluations SimulationEvaluation[]
  reflections ReflectionResponse[]
  questions  CaseQuestion[]
  mediaAssets MediaAsset[]

  // relations (optional)
  track      Track?        @relation(fields: [trackId], references: [id])

  @@index([competencyId])
  @@index([rubricId])
  @@index([createdBy])
}

// Simple catalog for program tracks (e.g., BSW, MSW)
model Track {
  id    String @id
  name  String

  cases Case[]
}

// Ordered questions associated with a case session
model CaseQuestion {
  id       String @id @default(cuid())
  caseId   String
  order    Int
  prompt   String

  case     Case   @relation(fields: [caseId], references: [id])

  @@unique([caseId, order])
  @@index([caseId])
}

// Media assets (e.g., MP4) attached to a case
model MediaAsset {
  id     String   @id @default(cuid())
  caseId String
  path   String
  kind   MediaKind

  case   Case     @relation(fields: [caseId], references: [id])

  @@index([caseId])
}

model Persona {
  id             String   @id @default(cuid())
  caseId         String
  name           String
  backgroundJson Json
  voiceId        String
  avatarId       String
  promptTemplate String
  safetyJson     Json
  createdAt      DateTime @default(now())

  case        Case         @relation(fields: [caseId], references: [id])
  simulations Simulation[]

  @@index([caseId])
}

model Simulation {
  id         String            @id @default(cuid())
  caseId     String
  personaId  String
  studentId  String
  mode       SimulationMode
  status     SimulationStatus
  startedAt  DateTime          @default(now())
  endedAt    DateTime?

  // relations
  case       Case              @relation(fields: [caseId], references: [id])
  persona    Persona           @relation(fields: [personaId], references: [id])
  student    User              @relation("StudentSimulations", fields: [studentId], references: [id])
  turns      Turn[]
  analytics  AnalyticsSummary?
  feedback   Feedback[]

  @@index([caseId])
  @@index([personaId])
  @@index([studentId])
}

model Turn {
  id            String   @id @default(cuid())
  simulationId  String
  speaker       Speaker
  text          String
  audioUrl      String?
  metaJson      Json?
  createdAt     DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])

  @@index([simulationId])
}

model Rubric {
  id            String   @id @default(cuid())
  name          String
  epasYear      Int
  structureJson Json

  cases Case[]
}

model AnalyticsSummary {
  id                   String   @id @default(cuid())
  simulationId         String   @unique
  metricsJson          Json
  competencyScoresJson Json
  createdAt            DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])
}

model Feedback {
  id             String   @id @default(cuid())
  simulationId   String
  studentId      String
  facultyId      String?
  aiFeedbackMd   String
  facultyNotesMd String?
  actionItemsJson Json?
  createdAt      DateTime @default(now())

  simulation Simulation @relation(fields: [simulationId], references: [id])
  student    User       @relation("StudentFeedback", fields: [studentId], references: [id])
  faculty    User?      @relation("FacultyFeedback", fields: [facultyId], references: [id])

  @@index([simulationId])
  @@index([studentId])
  @@index([facultyId])
}

model Assignment {
  id        String   @id @default(cuid())
  caseId    String
  studentId String
  assignedBy String   // Admin ID
  createdAt DateTime @default(now())

  case     Case @relation(fields: [caseId], references: [id])
  student  User @relation("StudentAssignments", fields: [studentId], references: [id])
  admin    User @relation("AdminAssignments", fields: [assignedBy], references: [id])

  @@unique([caseId, studentId])
  @@index([caseId])
  @@index([studentId])
  @@index([assignedBy])
}

model SimulationEvaluation {
  id                String   @id @default(cuid())
  simSessionId      String?  // Can be null for demo sessions
  caseId            String
  studentId         String?
  empathy           Int?     // 1-5 score (legacy field)
  culturalResponse  Int?     // 1-5 score (legacy field)
  ethicsAwareness   Int?     // 1-5 score (legacy field)
  activeListening   Int?     // 1-5 score (legacy field)
  summary           String?  // AI-generated summary (legacy field)
  evidenceJson      Json?    // Evidence quotes for each dimension (legacy field)
  competencyAlignmentJson Json? // How behavior aligns with competencies (legacy field)
  modelConfidence   Float?   // 0.0-1.0 confidence score (legacy field)
  rubricJson        Json?    // New flexible grading result JSON
  createdAt         DateTime @default(now())

  case     Case @relation(fields: [caseId], references: [id])
  student  User? @relation(fields: [studentId], references: [id])

  @@unique([caseId, simSessionId])
  @@index([caseId])
  @@index([simSessionId])
  @@index([studentId])
}

model ReflectionResponse {
  id           String    @id @default(cuid())
  caseId       String
  simSessionId String?
  studentId    String
  response     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  case    Case @relation(fields: [caseId], references: [id])
  student User @relation(fields: [studentId], references: [id])

  @@unique([caseId, simSessionId, studentId])
  @@index([caseId])
  @@index([simSessionId])
  @@index([studentId])
}

// Lightweight logging for BSW Q&A answers per session
model TurnLog {
  id            String   @id @default(cuid())
  simSessionId  String
  caseId        String?
  order         Int
  role          String   // "student" or other
  questionText  String?
  text          String
  createdAt     DateTime @default(now())

  @@unique([simSessionId, order, role])
  @@index([simSessionId])
}